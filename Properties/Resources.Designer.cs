//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KeyedColors.Properties {
    using System;
    using System.Drawing;
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("KeyedColors.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Returns an icon for the application.
        /// </summary>
        internal static Icon AppIcon {
            get {
                try {
                    // Try to load the icon from logo.ico in the root folder
                    string iconPath = System.IO.Path.Combine(
                        AppDomain.CurrentDomain.BaseDirectory,
                        "logo.ico");
                    
                    if (System.IO.File.Exists(iconPath)) {
                        return new Icon(iconPath);
                    }
                } catch {
                    // Fall through to default icon if there's an error
                }
                
                // Create a logo-like icon programmatically as a fallback
                Bitmap bitmap = new Bitmap(32, 32);
                using (Graphics g = Graphics.FromImage(bitmap))
                {
                    g.Clear(Color.FromArgb(0, 120, 215)); // Windows blue
                    
                    // Draw a simple key-like shape
                    using (Pen pen = new Pen(Color.White, 2))
                    {
                        // Draw key circle
                        g.DrawEllipse(pen, 5, 5, 10, 10);
                        
                        // Draw key stem
                        g.DrawLine(pen, 15, 10, 26, 10);
                        
                        // Draw teeth
                        g.DrawLine(pen, 20, 10, 20, 15);
                        g.DrawLine(pen, 23, 10, 23, 18);
                    }
                    
                    // Draw a simple color palette
                    using (SolidBrush brush = new SolidBrush(Color.Red))
                    {
                        g.FillRectangle(brush, 5, 20, 6, 6);
                    }
                    using (SolidBrush brush = new SolidBrush(Color.Green))
                    {
                        g.FillRectangle(brush, 13, 20, 6, 6);
                    }
                    using (SolidBrush brush = new SolidBrush(Color.Blue))
                    {
                        g.FillRectangle(brush, 21, 20, 6, 6);
                    }
                }
                
                // Convert to icon
                IntPtr hIcon = bitmap.GetHicon();
                Icon icon = Icon.FromHandle(hIcon);
                return icon;
            }
        }
    }
} 