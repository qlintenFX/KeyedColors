//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

namespace KeyedColors.Properties {
    using System;
    using System.Drawing;
    using System.Reflection;
    using System.Windows.Forms;
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager? resourceMan;
        
        private static global::System.Globalization.CultureInfo? resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("KeyedColors.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan!;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture ?? global::System.Globalization.CultureInfo.CurrentUICulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Returns an icon for the application.
        /// </summary>
        internal static Icon AppIcon {
            get {
                try {
                    // First try to load from embedded resources
                    Assembly assembly = Assembly.GetExecutingAssembly();
                    using (Stream? iconStream = assembly.GetManifestResourceStream("KeyedColors.logo.ico"))
                    {
                        if (iconStream != null)
                        {
                            return new Icon(iconStream);
                        }
                    }

                    // Try to load the icon from logo.ico in the root folder as fallback
                    string iconPath = System.IO.Path.Combine(
                        AppDomain.CurrentDomain.BaseDirectory,
                        "logo.ico");
                    
                    if (System.IO.File.Exists(iconPath)) {
                        return new Icon(iconPath);
                    }

                    // Try to extract from the executable as last resort
                    Icon? exeIcon = Icon.ExtractAssociatedIcon(Application.ExecutablePath);
                    if (exeIcon != null)
                    {
                        return exeIcon;
                    }
                } 
                catch {
                    // Fall through to system icon if there's an error
                }
                
                // If all else fails, return the system application icon
                return SystemIcons.Application;
            }
        }
    }
} 